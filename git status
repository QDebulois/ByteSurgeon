[1mdiff --git a/src/Enum/ModrmModEnum.php b/src/Enum/ModrmModEnum.php[m
[1mindex ebba561..0e9dbfe 100644[m
[1m--- a/src/Enum/ModrmModEnum.php[m
[1m+++ b/src/Enum/ModrmModEnum.php[m
[36m@@ -6,7 +6,11 @@[m [mnamespace Qdebulois\ByteSurgeon\Enum;[m
 [m
 enum ModrmModEnum: string[m
 {[m
[31m-    case DISPLACEMENT = '01';[m
[32m+[m[32m    case NO_DISPLACEMENT = '00';[m
[32m+[m
[32m+[m[32m    case DISPLACEMENT8 = '01';[m
[32m+[m
[32m+[m[32m    case DISPLACEMENT32 = '10';[m
 [m
     case REGISTER = '11';[m
 [m
[1mdiff --git a/src/Enum/ModrmRegEnum.php b/src/Enum/ModrmRegEnum.php[m
[1mindex 811d199..5838fd3 100644[m
[1m--- a/src/Enum/ModrmRegEnum.php[m
[1m+++ b/src/Enum/ModrmRegEnum.php[m
[36m@@ -8,8 +8,20 @@[m [menum ModrmRegEnum: string[m
 {[m
     case ADD = '000';[m
 [m
[32m+[m[32m    case OR = '001';[m
[32m+[m
[32m+[m[32m    case ADC = '010'; // Add with carry[m
[32m+[m
[32m+[m[32m    case SBB = '011'; // Sub with borrow[m
[32m+[m
[32m+[m[32m    case AND = '100';[m
[32m+[m
     case SUB = '101';[m
 [m
[32m+[m[32m    case XOR = '110';[m
[32m+[m
[32m+[m[32m    case CMP = '111';[m
[32m+[m
     public static function fromStrbin(string $strbin): ?self[m
     {[m
         return self::tryFrom($strbin);[m
[1mdiff --git a/src/Enum/ModrmRmEnum.php b/src/Enum/ModrmRmEnum.php[m
[1mindex dd934ef..0f1d355 100644[m
[1m--- a/src/Enum/ModrmRmEnum.php[m
[1m+++ b/src/Enum/ModrmRmEnum.php[m
[36m@@ -6,8 +6,30 @@[m [mnamespace Qdebulois\ByteSurgeon\Enum;[m
 [m
 enum ModrmRmEnum: string[m
 {[m
[32m+[m[32m    // Accumulator, 32 bits[m
     case EAX = '000';[m
 [m
[32m+[m[32m    // General-purpose counter register, 32-bit (often used for loops)[m
[32m+[m[32m    case ECX = '001';[m
[32m+[m
[32m+[m[32m    // Data register, 32-bit (also used for I/O)[m
[32m+[m[32m    case EDX = '010';[m
[32m+[m
[32m+[m[32m    // General-purpose base register, 32-bit (often used as a base pointer)[m
[32m+[m[32m    case EBX = '011';[m
[32m+[m
[32m+[m[32m    // Stack Pointer, 32-bit[m
[32m+[m[32m    case ESP = '100';[m
[32m+[m
[32m+[m[32m    // Base Pointer, 32-bit (often used to access local variables)[m
[32m+[m[32m    case EBP = '101';[m
[32m+[m
[32m+[m[32m    // Source Index, used for string/array/memory operations[m
[32m+[m[32m    case ESI = '110';[m
[32m+[m
[32m+[m[32m    // Destination Index, used for string/array/memory operations[m
[32m+[m[32m    case EDI = '111';[m
[32m+[m
     public static function fromStrbin(string $strbin): ?self[m
     {[m
         return self::tryFrom($strbin);[m
[1mdiff --git a/src/Enum/OpcodeEnum.php b/src/Enum/OpcodeEnum.php[m
[1mindex d1c4c0a..9c5c17f 100644[m
[1m--- a/src/Enum/OpcodeEnum.php[m
[1m+++ b/src/Enum/OpcodeEnum.php[m
[36m@@ -6,8 +6,33 @@[m [mnamespace Qdebulois\ByteSurgeon\Enum;[m
 [m
 enum OpcodeEnum: int[m
 {[m
[32m+[m[32m    // add/sub/cmp avec immediate 8-bit[m
     case ARITHMETIC_IMM8 = 0x83;[m
 [m
[32m+[m[32m    // mov registre 8-bit immediate[m
[32m+[m[32m    case MOV_REG_IMM8 = 0xB0;[m
[32m+[m
[32m+[m[32m    // mov registre 32-bit immediate (ex: B8+rd)[m
[32m+[m[32m    case MOV_REG_IMM32 = 0xB8;[m
[32m+[m
[32m+[m[32m    // add reg/mem to reg[m
[32m+[m[32m    case ADD_REG_MEM = 0x01;[m
[32m+[m
[32m+[m[32m    // add reg/mem to reg (variant)[m
[32m+[m[32m    case ADD_REG_MEM_TO_REG = 0x03;[m
[32m+[m
[32m+[m[32m    // jump short relative 8-bit[m
[32m+[m[32m    case JMP_REL8 = 0xEB;[m
[32m+[m
[32m+[m[32m    // jump near relative 32-bit[m
[32m+[m[32m    case JMP_REL32 = 0xE9;[m
[32m+[m
[32m+[m[32m    // interrupt (ex: int 0x80 pour syscall)[m
[32m+[m[32m    case INT = 0xCD;[m
[32m+[m
[32m+[m[32m    // pr√©fixe pour instructions √©tendues (ex: syscall, sysenter)[m
[32m+[m[32m    case SYSCALL_PREFIX = 0x0F;[m
[32m+[m
     public static function fromInt(int $byte): ?self[m
     {[m
         return self::tryFrom($byte);[m
